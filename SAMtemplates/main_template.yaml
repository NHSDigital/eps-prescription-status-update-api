AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  PSU resources

# Params passed from the Makefile
Parameters:
  TruststoreVersion:
    Type: String
    Default: none

  EnableMutualTLS:
    Type: String
    Default: false
    AllowedValues: [true, false]

  EnableSplunk:
    Type: String
    Default: false
    AllowedValues: [true, false]

  LogLevel:
    Type: String
    Default: INFO

  LogRetentionInDays:
    Type: Number
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1096,
        1827,
        2192,
        2557,
        2922,
        3288,
        3653,
      ]

Conditions:
  ShouldUseMutualTLS: !Equals [true, !Ref EnableMutualTLS]
  ShouldUseSplunk: !Equals [true, !Ref EnableSplunk]

Resources:
  Tables:
    Type: AWS::Serverless::Application
    Properties:
      Location: tables/main.yaml
      Parameters:
        StackName: !Ref AWS::StackName
  
  Apis:
    Type: AWS::Serverless::Application
    Properties:
      Location: apis/main.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        EnableMutualTLS: !Ref EnableMutualTLS
        TruststoreVersion: !Ref TruststoreVersion
        UpdatePrescriptionStatusStateMachineName: !GetAtt StateMachines.Outputs.UpdatePrescriptionStatusStateMachineName
        UpdatePrescriptionStatusStateMachineArn: !GetAtt StateMachines.Outputs.UpdatePrescriptionStatusStateMachineArn
        LogRetentionInDays: !Ref LogRetentionInDays
        EnableSplunk: !Ref EnableSplunk
  
  Functions:
    Type: AWS::Serverless::Application
    Properties:
      Location: functions/main.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        PrescriptionStatusUpdatesTableName: !GetAtt Tables.Outputs.PrescriptionStatusUpdatesTableName
        LogLevel: !Ref LogLevel
        LogRetentionInDays: !Ref LogRetentionInDays
        EnableSplunk: !Ref EnableSplunk
  
  StateMachines:
    Type: AWS::Serverless::Application
    Properties:
      Location: state_machines/main.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        UpdatePrescriptionStatusFunctionName: !GetAtt Functions.Outputs.UpdatePrescriptionStatusFunctionName
        UpdatePrescriptionStatusFunctionArn: !GetAtt Functions.Outputs.UpdatePrescriptionStatusFunctionArn
        LogRetentionInDays: !Ref LogRetentionInDays
        EnableSplunk: !Ref EnableSplunk

  # TLS cert for custom domain
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Ref "AWS::StackName"
            - Fn::ImportValue: eps-route53-resources:EPS-domain
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Ref "AWS::StackName"
                - Fn::ImportValue: eps-route53-resources:EPS-domain
          HostedZoneId:
            Fn::ImportValue: eps-route53-resources:EPS-ZoneID

  # Http api
  HttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      Domain:
        DomainName:
          Fn::Join:
            - "."
            - - !Ref "AWS::StackName"
              - Fn::ImportValue: eps-route53-resources:EPS-domain
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId:
            Fn::ImportValue: eps-route53-resources:EPS-ZoneID
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        MutualTlsAuthentication:
          TruststoreUri:
            "Fn::If":
              - ShouldUseMutualTLS
              - Fn::Join:
                  - "/"
                  - - "s3:/"
                    - !Select [
                        5,
                        !Split [
                          ":",
                          Fn::ImportValue: account-resources:TrustStoreBucket,
                        ],
                      ]
                    - "psu-truststore.pem"
              - !Ref "AWS::NoValue"
          TruststoreVersion:
            "Fn::If":
              - ShouldUseMutualTLS
              - !Ref TruststoreVersion
              - !Ref "AWS::NoValue"
      DisableExecuteApiEndpoint:
        "Fn::If":
          - ShouldUseMutualTLS
          - true
          - !Ref "AWS::NoValue"
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGwAccessLogs.Arn
        Format: "{ \
          \"requestTime\": \"$context.requestTime\", \
          \"apiId\": \"$context.apiId\", \
          \"accountId\": \"$context.accountId\", \
          \"resourcePath\": \"$context.resourcePath\", \
          \"stage\": \"$context.stage\", \
          \"requestId\": \"$context.requestId\", \
          \"extendedRequestId\": \"$context.extendedRequestId\", \
          \"status\": \"$context.status\", \
          \"httpMethod\": \"$context.httpMethod\", \
          \"protocol\": \"$context.protocol\", \
          \"path\": \"$context.path\", \
          \"responseLatency\": \"$context.responseLatency\", \
          \"responseLength\": \"$context.responseLength\",
          \"domainName\": \"$context.domainName\", \
          \"identity\": { \
          \"sourceIp\": \"$context.identity.sourceIp\", \
          \"userAgent\": \"$context.identity.userAgent\", \
          \"clientCert\":{ \
          \"subjectDN\": \"$context.identity.clientCert.subjectDN\", \
          \"issuerDN\": \"$context.identity.clientCert.issuerDN\", \
          \"serialNumber\": \"$context.identity.clientCert.serialNumber\", \
          \"validityNotBefore\": \"$context.identity.clientCert.validity.notBefore\", \
          \"validityNotAfter\": \"$context.identity.clientCert.validity.notAfter\" \
          }}, \
          \"integration\":{ \
          \"error\": \"$context.integration.error\", \
          \"integrationStatus\": \"$context.integration.integrationStatus\", \
          \"latency\": \"$context.integration.latency\", \
          \"requestId\": \"$context.integration.requestId\", \
          \"status\": \"$context.integration.status\" \
          }}"

  ApiGwAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join [
          "/",
          ["/aws/apigateway", !Ref "AWS::StackName", !Sub "${HttpApiGateway}"],
        ]
      RetentionInDays: !Ref LogRetentionInDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  ApiGwAccessLogsSplunkSubscriptionFilter:
    Condition: ShouldUseSplunk
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
      LogGroupName: !Ref ApiGwAccessLogs
      FilterPattern: "" # All logs
      DestinationArn: !ImportValue lambda-resources:SplunkDeliveryStream
