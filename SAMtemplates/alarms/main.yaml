AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  PSU Cloudwatch alarms and related resources

Parameters:
  StackName:
    Type: String
    Default: none

  EnableAlerts:
    Type: String

  GetStatusUpdatesFunctionName:
    Type: String
    Default: none

  GetStatusUpdatesConcurrencyThreshold:
    Type: Number
    Default: 5 #FIXME: Set to something realistic!!! DON'T FORGET!

  UpdatePrescriptionStatusFunctionName:
    Type: String
    Default: none

  UpdatePrescriptionStatusConcurrencyThreshold:
    Type: Number
    Default: 5 #FIXME: Set to something realistic!!! DON'T FORGET!

  StatusFunctionName:
    Type: String
    Default: none
  
  StatusConcurrencyThreshold:
    Type: Number
    Default: 5 #FIXME: Set to something realistic!!! DON'T FORGET!

  ConvertRequestToFhirFormatFunctionName:
    Type: String
    Default: none

  ConvertRequestToFhirFormatConcurrencyThreshold:
    Type: Number
    Default: 5  #FIXME: Set to something realistic!!! DON'T FORGET!

  CapabilityStatementFunctionName:
    Type: String
    Default: none

  CapabilityStatementConcurrencyThreshold:
    Type: Number
    Default: 5  #FIXME: Set to something realistic!!! DON'T FORGET!

  CheckPrescriptionStatusUpdatesFunctionName:
    Type: String
    Default: none

  CheckPrescriptionStatusUpdatesConcurrencyThreshold:
    Type: Number
    Default: 5  #FIXME: Set to something realistic!!! DON'T FORGET!

Conditions:
  ShouldCreateCheckPrescriptionStatusUpdatesAlarm: !Not [!Equals [!Ref CheckPrescriptionStatusUpdatesFunctionName, ""]]

Resources:
  GetStatusUpdatesErrorsLogsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: GetStatusUpdatesErrors
      FilterPattern: !Sub '{ ($.level = "ERROR") && ($.function_name = "${GetStatusUpdatesFunctionName}") }' # function_name included to allow it to be set as a dimension on the metric
      LogGroupName:
        Fn::ImportValue: !Sub ${StackName}:functions:${GetStatusUpdatesFunctionName}:LambdaLogGroupName
      MetricTransformations:
        - MetricNamespace: LambdaLogFilterMetrics
          MetricName: ErrorCount
          MetricValue: 1
          Unit: Count
          Dimensions: # dimensions for a logs filter metric can only be a field/value from the filter pattern
            - Key: FunctionName
              Value: $.function_name

  GetStatusUpdatesErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of GetStatusUpdates errors
      AlarmName: !Sub ${StackName}_GetStatusUpdates_Errors
      Namespace: LambdaLogFilterMetrics
      MetricName: ErrorCount
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetStatusUpdatesFunctionName
      Period: 60 #seconds
      EvaluationPeriods: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  GetStatusUpdatesUnhandledErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of GetStatusUpdates unhandled errors
      AlarmName: !Sub ${StackName}_GetStatusUpdates_UnhandledErrors
      Namespace: Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetStatusUpdatesFunctionName
      Period: 60 #seconds
      EvaluationPeriods: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  GetStatusUpdatesConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Concurrency of GetStatusUpdates exceeds threshold"
      AlarmName: !Sub "${StackName}_GetStatusUpdates_Concurrency"
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetStatusUpdatesFunctionName
      Period: 60  # seconds
      EvaluationPeriods: 1
      Statistic: Maximum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref GetStatusUpdatesConcurrencyThreshold
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  UpdatePrescriptionStatusConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Concurrency of UpdatePrescriptionStatus exceeds threshold"
      AlarmName: !Sub "${StackName}_UpdatePrescriptionStatus_Concurrency"
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Dimensions:
        - Name: FunctionName
          Value: !Ref UpdatePrescriptionStatusFunctionName
      Period: 60  # seconds
      EvaluationPeriods: 1
      Statistic: Maximum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref UpdatePrescriptionStatusConcurrencyThreshold
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  PSUStatusConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Concurrency of PSU /_status endpoint exceeds threshold"
      AlarmName: !Sub "${StackName}_PSU_Status_Concurrency"
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Dimensions:
        - Name: FunctionName
          Value: !Ref StatusFunctionName
      Period: 60  # seconds
      Statistic: Maximum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref StatusConcurrencyThreshold
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

        
  ConvertRequestToFhirFormatConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Concurrency of ConvertRequestToFhirFormat exceeds threshold"
      AlarmName: !Sub "${StackName}_ConvertRequestToFhirFormat_Concurrency"
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Dimensions:
        - Name: FunctionName
          Value: !Ref ConvertRequestToFhirFormatFunctionName
      Period: 60  # seconds
      EvaluationPeriods: 1
      Statistic: Maximum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref ConvertRequestToFhirFormatConcurrencyThreshold
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  CapabilityStatementConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Concurrency of CapabilityStatement exceeds threshold"
      AlarmName: !Sub "${StackName}_CapabilityStatement_Concurrency"
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Dimensions:
        - Name: FunctionName
          Value: !Ref CapabilityStatementFunctionName
      Period: 60  # seconds
      EvaluationPeriods: 1
      Statistic: Maximum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref CapabilityStatementConcurrencyThreshold
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  CheckPrescriptionStatusUpdatesConcurrencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ShouldCreateCheckPrescriptionStatusUpdatesAlarm
    Properties:
      AlarmDescription: "Concurrency of CheckPrescriptionStatusUpdates exceeds threshold"
      AlarmName: !Sub "${StackName}_CheckPrescriptionStatusUpdates_Concurrency"
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Dimensions:
        - Name: FunctionName
          Value: !Ref CheckPrescriptionStatusUpdatesFunctionName
      Period: 60  # seconds
      EvaluationPeriods: 1
      Statistic: Maximum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: !Ref CheckPrescriptionStatusUpdatesConcurrencyThreshold
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
