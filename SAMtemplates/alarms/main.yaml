AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  PSU Cloudwatch alarms and related resources

Parameters:
  StackName:
    Type: String
    Default: none

  GetStatusUpdatesFunctionName:
    Type: String
    Default: none

  UpdatePrescriptionStatusFunctionName:
    Type: String
    Default: none

  PrescriptionStatusUpdatesTableName:
    Type: String
    Default: none

  FhirValidatorStackName:
    Type: String
    Default: fhir-validator

  EnableAlerts:
    Type: String

Resources:
  GetStatusUpdatesErrorsLogsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: GetStatusUpdatesErrors
      FilterPattern: !Sub '{ ($.level = "ERROR") && ($.function_name = "${GetStatusUpdatesFunctionName}") }' # function_name included to allow it to be set as a dimension on the metric
      LogGroupName:
        Fn::ImportValue: !Sub ${StackName}:functions:${GetStatusUpdatesFunctionName}:LambdaLogGroupName
      MetricTransformations:
        - MetricNamespace: LambdaLogFilterMetrics
          MetricName: ErrorCount
          MetricValue: 1
          Unit: Count
          Dimensions: # dimensions for a logs filter metric can only be a field/value from the filter pattern
            - Key: FunctionName
              Value: $.function_name

  GetStatusUpdatesErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of GetStatusUpdates errors
      AlarmName: !Sub ${StackName}_GetStatusUpdates_Errors
      Namespace: LambdaLogFilterMetrics
      MetricName: ErrorCount
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetStatusUpdatesFunctionName
      Period: 60 #seconds
      EvaluationPeriods: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  GetStatusUpdatesUnhandledErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of GetStatusUpdates unhandled errors
      AlarmName: !Sub ${StackName}_GetStatusUpdates_UnhandledErrors
      Namespace: Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetStatusUpdatesFunctionName
      Period: 60 #seconds
      EvaluationPeriods: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  PrescriptionStatusUpdateErrorsLogsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: PrescriptionStatusUpdateErrors
      FilterPattern: !Sub '{ ($.function_name = "${UpdatePrescriptionStatusFunctionName}") && ($.response.statusCode = 500) }'
      LogGroupName:
        Fn::ImportValue: !Sub ${StackName}:functions:${UpdatePrescriptionStatusFunctionName}:LambdaLogGroupName
      MetricTransformations:
        - MetricNamespace: LambdaLogFilterMetrics
          MetricName: ErrorCount
          MetricValue: 1
          Unit: Count
          Dimensions:
            - Key: FunctionName
              Value: $.function_name

  # Count of errors forced by INT tests
  PrescriptionStatusUpdateForcedErrorsLogsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: PrescriptionStatusUpdateForcedErrors
      FilterPattern: !Sub '{ ($.level = "INFO") && ($.function_name = "${UpdatePrescriptionStatusFunctionName}") && ($.message = %Forcing error for INT test prescription%) }'
      LogGroupName:
        Fn::ImportValue: !Sub ${StackName}:functions:${UpdatePrescriptionStatusFunctionName}:LambdaLogGroupName
      MetricTransformations:
        - MetricNamespace: LambdaLogFilterMetrics
          MetricName: ForcedErrorCount
          MetricValue: 1
          Unit: Count
          Dimensions:
            - Key: FunctionName
              Value: $.function_name

  PrescriptionStatusUpdateErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of PrescriptionStatusUpdate errors
      AlarmName: !Sub ${StackName}_PrescriptionStatusUpdate_Errors
      Metrics:
        - Id: errors
          Label: All 500 errors
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: ErrorCount
              Namespace: LambdaLogFilterMetrics
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UpdatePrescriptionStatusFunctionName
            Period: 60
            Stat: Sum
            Unit: Count
        - Id: forcedErrors
          Label: Forced 500 errors
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: ForcedErrorCount
              Namespace: LambdaLogFilterMetrics
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UpdatePrescriptionStatusFunctionName
            Period: 60
            Stat: Sum
            Unit: Count
        - Id: trueErrors
          Label: True 500 errors
          Expression: errors - forcedErrors
          ReturnData: true
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  PrescriptionStatusUpdateUnhandledErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of PrescriptionStatusUpdate unhandled errors
      AlarmName: !Sub ${StackName}_PrescriptionStatusUpdate_UnhandledErrors
      Namespace: Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref UpdatePrescriptionStatusFunctionName
      Period: 60 #seconds
      EvaluationPeriods: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  DynamoDBSystemErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of DynamoDB system errors
      AlarmName: !Sub ${StackName}_DynamoDB_SystemErrors
      Namespace: DynamoDB
      MetricName: SystemErrors
      Dimensions:
        - Name: TableName
          Value: !Ref PrescriptionStatusUpdatesTableName
      Period: 60 #seconds
      EvaluationPeriods: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn

  FHIRValidatorErrorLogsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: FHIRValidatorErrors
      # Catch any messages that are strings that contain line breaks (Java stack traces)
      FilterPattern: "\n"
      LogGroupName: !Join
        - ""
        - - /aws/lambda/
          - Fn::ImportValue: !Sub ${FhirValidatorStackName}:FHIRValidatorUKCoreLambdaName
      MetricTransformations:
        - MetricNamespace: LambdaLogFilterMetrics
          MetricName: ErrorCount
          MetricValue: 1
          Unit: Count
          Dimensions:
            - Key: FunctionName
              Value:
                Fn::ImportValue: !Sub ${FhirValidatorStackName}:FHIRValidatorUKCoreLambdaName

  FHIRValidatorErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Count of FHIR Validator system errors
      AlarmName: !Sub ${StackName}_FHIR_Validator_Errors
      Namespace: LambdaLogFilterMetrics
      MetricName: ErrorCount
      Dimensions:
        - Name: FunctionName
          Value:
            Fn::ImportValue: !Sub ${FhirValidatorStackName}:FHIRValidatorUKCoreLambdaName
      Period: 60 #seconds
      EvaluationPeriods: 1
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching
      ActionsEnabled: !Ref EnableAlerts
      AlarmActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      InsufficientDataActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
      OKActions:
        - !ImportValue lambda-resources:SlackAlertsSnsTopicArn
